{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Flor Hernandez\\\\RSS-Feed-Reader\\\\client\\\\src\\\\Pages\\\\Feed.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { ThemeContext } from \"../contexts/ThemeContext\";\nimport './/Feed.css';\nimport Footer from './Footer';\n/*\r\n\r\n\r\n\r\nfunction Feed () {\r\n    const [backEndData, setBackEndData] = useState([{}]);\r\n    const [rssUrl, setRssUrl] = useState(\"\");\r\n    const [items, setItems] = useState([]);\r\n  \r\n    const getRss = async (e) => {\r\n        e.preventDefault();\r\n        const urlRegex = /(http|ftp|https):\\/\\/[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:\\/~+#-]*[\\w@?^=%&amp;\\/~+#-])?/;\r\n        if (!urlRegex.test(rssUrl)) {\r\n          return;\r\n        }\r\n    \r\n    const res = await fetch(`https://api.allorigins.win/get?url=${rssUrl}`);\r\n    const { contents } = await res.json();\r\n    const feed = new window.DOMParser().parseFromString(contents, \"text/xml\");\r\n    const items = feed.querySelectorAll(\"item\");\r\n    const feedItems = [...items].map((el) => ({\r\n          link: el.querySelector(\"link\").innerHTML,\r\n          title: el.querySelector(\"title\").innerHTML,\r\n          author: el.querySelector(\"author\").innerHTML\r\n    }));\r\n    setItems(feedItems);\r\n    };\r\n\r\n    //const [initialized, setInitialized] = useState(false);\r\n    //const [url, setUrl] = useState(\"\");\r\n    //const [listings, setListings] = useState([]);\r\n    //const [data, setData] = useState({});\r\n    //const  querystring = require(\"querystring\");\r\n    /*const getListings = async url => {\r\n        try {\r\n          const response = await getFeedListing(url);\r\n          setListings(response.data.items);\r\n          setData(response.data.feed);\r\n        } catch (ex) {\r\n          console.log(ex);\r\n        }\r\n      };\r\n    \r\n    const openLink = url => {\r\n        window.location.href = url;\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (!initialized) {\r\n          const url = querystring.decode(location.search)[\"?url\"];\r\n          setUrl(url);\r\n          getListings(url);\r\n          setInitialized(true);\r\n        }\r\n      });\r\n   \r\n   */\n\n/*\r\n    const context = useContext(ThemeContext);\r\n    const theme = context.isLightTheme ? context.light : context.dark;\r\n    const theme2 = context.isLightTheme ? context.cardLight : context.cardDark;\r\n    const theme3 = context.isLightTheme ? context.pageLight : context.pageDark;\r\n\r\n    const ThemeToggler = (props) => {\r\n      const context = useContext(ThemeContext);\r\n      const btnText = context.isLightTheme ? \"Light ‚òÄÔ∏è\" : \"Dark üåò\";\r\n      const toggleTheme = context.toggleTheme;\r\n      \r\n    \r\n      return (\r\n        <button className={`button is-light rounded`} onClick={toggleTheme}>\r\n          {btnText}\r\n        </button>\r\n      );\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n      // A proxy was define in package.json so we dont need to put the full route. This will be changed in production\r\n      fetch(\"/api\").then(\r\n        response => response.json()\r\n      ).then(\r\n        data => {\r\n          setBackEndData(data)\r\n        }\r\n      )\r\n    }, [])\r\n    \r\n    return (\r\n        \r\n         <div className= {`Feed ${theme}` }>\r\n         <div className={`nav ${theme2}`}>\r\n          <div className=\"logo\">RSS-Feed<span>.</span></div> \r\n          \r\n          <ul>\r\n            <li> <a href =\"/\" id = \"home-link\" >\r\n                         Home\r\n                       </a> </li>\r\n            <li> <a href =\"/feed\" id = \"feed-link\" >\r\n                         Feed\r\n                       </a> </li>\r\n           \r\n          </ul>\r\n          </div>\r\n       \r\n          <div className={`${theme3}`}>\r\n          <div className={theme3}>\r\n          <ThemeToggler className=\"themeBtn\"/>  \r\n          </div> \r\n          <form onSubmit={getRss}>\r\n        <div>\r\n          <label> rss url</label>\r\n          <br />\r\n          <input onChange={(e) => setRssUrl(e.target.value)} value={rssUrl} />\r\n        </div>\r\n        <input type=\"submit\" />\r\n      </form>\r\n      {items.map((item) => {\r\n        return (\r\n          <div>\r\n            <h1>{item.title}</h1>\r\n            <p>{item.author}</p>\r\n            <a href={item.link}>{item.link}</a>\r\n          </div>\r\n        );\r\n      })}\r\n          \r\n       \r\n       </div>\r\n        <Footer/>\r\n       </div>\r\n       \r\n\r\n    );\r\n}\r\n\r\nexport default Feed;\r\n\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Feed() {\n  _s();\n\n  const [rssUrl, setRssUrl] = useState(\"\");\n  const [items, setItems] = useState([]);\n\n  const getRss = async e => {\n    e.preventDefault();\n    const urlRegex = /(http|ftp|https):\\/\\/[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:\\/~+#-]*[\\w@?^=%&amp;\\/~+#-])?/;\n\n    if (!urlRegex.test(rssUrl)) {\n      return;\n    }\n\n    const res = await fetch(`https://api.allorigins.win/get?url=${rssUrl}`);\n    const {\n      contents\n    } = await res.json();\n    const feed = new window.DOMParser().parseFromString(contents, \"text/xml\");\n    const items = feed.querySelectorAll(\"item\");\n    const feedItems = [...items].map(el => ({\n      link: el.querySelector(\"link\").innerHTML,\n      title: el.querySelector(\"title\").innerHTML,\n      author: el.querySelector(\"author\").innerHTML\n    }));\n    setItems(feedItems);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Feed\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: getRss,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \" rss url\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setRssUrl(e.target.value),\n          value: rssUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), items.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: item.link,\n          children: item.link\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Feed, \"Hsh3F9QPWyNbECSLcJs4HqDNf6Y=\");\n\n_c = Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"sources":["C:/Users/Flor Hernandez/RSS-Feed-Reader/client/src/Pages/Feed.js"],"names":["React","useEffect","useState","useContext","ThemeContext","Footer","Feed","rssUrl","setRssUrl","items","setItems","getRss","e","preventDefault","urlRegex","test","res","fetch","contents","json","feed","window","DOMParser","parseFromString","querySelectorAll","feedItems","map","el","link","querySelector","innerHTML","title","author","target","value","item"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,UAApC,QAAsD,OAAtD;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAO,aAAP;AACA,OAAOC,MAAP,MAAmB,UAAneAAe,SAASC,IAAT,GAAgB;AAAA;;AAC7B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMS,MAAM,GAAG,MAAOC,CAAP,IAAa;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,QAAQ,GAAG,uFAAjB;;AACA,QAAI,CAACA,QAAQ,CAACC,IAAT,CAAcR,MAAd,CAAL,EAA4B;AAC1B;AACD;;AACD,UAAMS,GAAG,GAAG,MAAMC,KAAK,CAAE,sCAAqCV,MAAO,EAA9C,CAAvB;AACA,UAAM;AAAEW,MAAAA;AAAF,QAAe,MAAMF,GAAG,CAACG,IAAJ,EAA3B;AACA,UAAMC,IAAI,GAAG,IAAIC,MAAM,CAACC,SAAX,GAAuBC,eAAvB,CAAuCL,QAAvC,EAAiD,UAAjD,CAAb;AACA,UAAMT,KAAK,GAAGW,IAAI,CAACI,gBAAL,CAAsB,MAAtB,CAAd;AACA,UAAMC,SAAS,GAAG,CAAC,GAAGhB,KAAJ,EAAWiB,GAAX,CAAgBC,EAAD,KAAS;AACxCC,MAAAA,IAAI,EAAED,EAAE,CAACE,aAAH,CAAiB,MAAjB,EAAyBC,SADS;AAExCC,MAAAA,KAAK,EAAEJ,EAAE,CAACE,aAAH,CAAiB,OAAjB,EAA0BC,SAFO;AAGxCE,MAAAA,MAAM,EAAEL,EAAE,CAACE,aAAH,CAAiB,QAAjB,EAA2BC;AAHK,KAAT,CAAf,CAAlB;AAKApB,IAAAA,QAAQ,CAACe,SAAD,CAAR;AACD,GAhBD;;AAkBA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE;AAAM,MAAA,QAAQ,EAAEd,MAAhB;AAAA,8BACE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAO,UAAA,QAAQ,EAAGC,CAAD,IAAOJ,SAAS,CAACI,CAAC,CAACqB,MAAF,CAASC,KAAV,CAAjC;AAAmD,UAAA,KAAK,EAAE3B;AAA1D;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAO,QAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EASGE,KAAK,CAACiB,GAAN,CAAWS,IAAD,IAAU;AACnB,0BACE;AAAA,gCACE;AAAA,oBAAKA,IAAI,CAACJ;AAAV;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAII,IAAI,CAACH;AAAT;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAG,UAAA,IAAI,EAAEG,IAAI,CAACP,IAAd;AAAA,oBAAqBO,IAAI,CAACP;AAA1B;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAOD,KARA,CATH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GA3CuBtB,I;;KAAAA,I","sourcesContent":["import React, {useEffect, useState, useContext } from 'react';\r\nimport { ThemeContext } from \"../contexts/ThemeContext\";\r\nimport './/Feed.css'\r\nimport Footer from './Footer'\r\n\r\n/*\r\n\r\n\r\n\r\nfunction Feed () {\r\n    const [backEndData, setBackEndData] = useState([{}]);\r\n    const [rssUrl, setRssUrl] = useState(\"\");\r\n    const [items, setItems] = useState([]);\r\n  \r\n    const getRss = async (e) => {\r\n        e.preventDefault();\r\n        const urlRegex = /(http|ftp|https):\\/\\/[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:\\/~+#-]*[\\w@?^=%&amp;\\/~+#-])?/;\r\n        if (!urlRegex.test(rssUrl)) {\r\n          return;\r\n        }\r\n    \r\n    const res = await fetch(`https://api.allorigins.win/get?url=${rssUrl}`);\r\n    const { contents } = await res.json();\r\n    const feed = new window.DOMParser().parseFromString(contents, \"text/xml\");\r\n    const items = feed.querySelectorAll(\"item\");\r\n    const feedItems = [...items].map((el) => ({\r\n          link: el.querySelector(\"link\").innerHTML,\r\n          title: el.querySelector(\"title\").innerHTML,\r\n          author: el.querySelector(\"author\").innerHTML\r\n    }));\r\n    setItems(feedItems);\r\n    };\r\n\r\n    //const [initialized, setInitialized] = useState(false);\r\n    //const [url, setUrl] = useState(\"\");\r\n    //const [listings, setListings] = useState([]);\r\n    //const [data, setData] = useState({});\r\n    //const  querystring = require(\"querystring\");\r\n    /*const getListings = async url => {\r\n        try {\r\n          const response = await getFeedListing(url);\r\n          setListings(response.data.items);\r\n          setData(response.data.feed);\r\n        } catch (ex) {\r\n          console.log(ex);\r\n        }\r\n      };\r\n    \r\n    const openLink = url => {\r\n        window.location.href = url;\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (!initialized) {\r\n          const url = querystring.decode(location.search)[\"?url\"];\r\n          setUrl(url);\r\n          getListings(url);\r\n          setInitialized(true);\r\n        }\r\n      });\r\n   \r\n   */\r\n      \r\n/*\r\n    const context = useContext(ThemeContext);\r\n    const theme = context.isLightTheme ? context.light : context.dark;\r\n    const theme2 = context.isLightTheme ? context.cardLight : context.cardDark;\r\n    const theme3 = context.isLightTheme ? context.pageLight : context.pageDark;\r\n\r\n    const ThemeToggler = (props) => {\r\n      const context = useContext(ThemeContext);\r\n      const btnText = context.isLightTheme ? \"Light ‚òÄÔ∏è\" : \"Dark üåò\";\r\n      const toggleTheme = context.toggleTheme;\r\n      \r\n    \r\n      return (\r\n        <button className={`button is-light rounded`} onClick={toggleTheme}>\r\n          {btnText}\r\n        </button>\r\n      );\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n      // A proxy was define in package.json so we dont need to put the full route. This will be changed in production\r\n      fetch(\"/api\").then(\r\n        response => response.json()\r\n      ).then(\r\n        data => {\r\n          setBackEndData(data)\r\n        }\r\n      )\r\n    }, [])\r\n    \r\n    return (\r\n        \r\n         <div className= {`Feed ${theme}` }>\r\n         <div className={`nav ${theme2}`}>\r\n          <div className=\"logo\">RSS-Feed<span>.</span></div> \r\n          \r\n          <ul>\r\n            <li> <a href =\"/\" id = \"home-link\" >\r\n                         Home\r\n                       </a> </li>\r\n            <li> <a href =\"/feed\" id = \"feed-link\" >\r\n                         Feed\r\n                       </a> </li>\r\n           \r\n          </ul>\r\n          </div>\r\n       \r\n          <div className={`${theme3}`}>\r\n          <div className={theme3}>\r\n          <ThemeToggler className=\"themeBtn\"/>  \r\n          </div> \r\n          <form onSubmit={getRss}>\r\n        <div>\r\n          <label> rss url</label>\r\n          <br />\r\n          <input onChange={(e) => setRssUrl(e.target.value)} value={rssUrl} />\r\n        </div>\r\n        <input type=\"submit\" />\r\n      </form>\r\n      {items.map((item) => {\r\n        return (\r\n          <div>\r\n            <h1>{item.title}</h1>\r\n            <p>{item.author}</p>\r\n            <a href={item.link}>{item.link}</a>\r\n          </div>\r\n        );\r\n      })}\r\n          \r\n       \r\n       </div>\r\n        <Footer/>\r\n       </div>\r\n       \r\n\r\n    );\r\n}\r\n\r\nexport default Feed;\r\n\r\n*/\r\n\r\n\r\n\r\nexport default function Feed() {\r\n  const [rssUrl, setRssUrl] = useState(\"\");\r\n  const [items, setItems] = useState([]);\r\n\r\n  const getRss = async (e) => {\r\n    e.preventDefault();\r\n    const urlRegex = /(http|ftp|https):\\/\\/[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:\\/~+#-]*[\\w@?^=%&amp;\\/~+#-])?/;\r\n    if (!urlRegex.test(rssUrl)) {\r\n      return;\r\n    }\r\n    const res = await fetch(`https://api.allorigins.win/get?url=${rssUrl}`);\r\n    const { contents } = await res.json();\r\n    const feed = new window.DOMParser().parseFromString(contents, \"text/xml\");\r\n    const items = feed.querySelectorAll(\"item\");\r\n    const feedItems = [...items].map((el) => ({\r\n      link: el.querySelector(\"link\").innerHTML,\r\n      title: el.querySelector(\"title\").innerHTML,\r\n      author: el.querySelector(\"author\").innerHTML\r\n    }));\r\n    setItems(feedItems);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Feed\">\r\n      <form onSubmit={getRss}>\r\n        <div>\r\n          <label> rss url</label>\r\n          <br />\r\n          <input onChange={(e) => setRssUrl(e.target.value)} value={rssUrl} />\r\n        </div>\r\n        <input type=\"submit\" />\r\n      </form>\r\n      {items.map((item) => {\r\n        return (\r\n          <div>\r\n            <h1>{item.title}</h1>\r\n            <p>{item.author}</p>\r\n            <a href={item.link}>{item.link}</a>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}