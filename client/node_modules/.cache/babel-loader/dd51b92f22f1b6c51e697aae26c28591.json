{"ast":null,"code":"var _jsxFileName = \"D:\\\\CS4800\\\\RSS-Feed-Reader\\\\RSS-Feed-Reader\\\\client\\\\src\\\\contexts\\\\ThemeContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect } from \"react\";\nimport 'bulma/css/bulma.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\nconst initialState = {\n  isLightTheme: true,\n  light: \" has-text-black\",\n  dark: \" has-background-black has-text-white\",\n  navLight: \"is-white\",\n  navDark: \"is-dark\",\n  cardLight: \" has-text-black\",\n  cardDark: \"has-background-dark has-text-white\",\n  pageLight: \" has-text-black\",\n  pageDark: \"has-text-white\"\n};\n\nfunction ThemeContextProvider(props) {\n  _s();\n\n  const [theme, setTheme] = useState(() => {\n    const item = localStorage.getItem('lightTheme');\n    const localTheme = item ? item === 'true' : true;\n    return { ...initialState,\n      isLightTheme: localTheme\n    };\n  });\n  useEffect(() => {\n    localStorage.setItem('lightTheme', theme.isLightTheme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prevState => ({ ...prevState,\n      isLightTheme: !prevState.isLightTheme\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: { ...theme,\n      toggleTheme: toggleTheme\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ThemeContextProvider, \"B4dlyummzbKjavbpEDe1AN9r/Wc=\");\n\n_c = ThemeContextProvider;\nexport default ThemeContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"sources":["D:/CS4800/RSS-Feed-Reader/RSS-Feed-Reader/client/src/contexts/ThemeContext.js"],"names":["React","createContext","useState","useEffect","ThemeContext","initialState","isLightTheme","light","dark","navLight","navDark","cardLight","cardDark","pageLight","pageDark","ThemeContextProvider","props","theme","setTheme","item","localStorage","getItem","localTheme","setItem","toggleTheme","prevState","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAO,qBAAP;;AACA,OAAO,MAAMC,YAAY,gBAAGH,aAAa,EAAlC;AAEP,MAAMI,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,IADK;AAEnBC,EAAAA,KAAK,EAAE,iBAFY;AAGnBC,EAAAA,IAAI,EAAE,sCAHa;AAInBC,EAAAA,QAAQ,EAAE,UAJS;AAKnBC,EAAAA,OAAO,EAAE,SALU;AAMnBC,EAAAA,SAAS,EAAE,iBANQ;AAOnBC,EAAAA,QAAQ,EAAE,oCAPS;AAQnBC,EAAAA,SAAS,EAAE,iBARQ;AASnBC,EAAAA,QAAQ,EAAE;AATS,CAArB;;AAYA,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AAAA;;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,MAAM;AACvC,UAAMiB,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAb;AACA,UAAMC,UAAU,GAAGH,IAAI,GAAIA,IAAI,KAAK,MAAb,GAAuB,IAA9C;AACA,WAAO,EAAE,GAAGd,YAAL;AAAmBC,MAAAA,YAAY,EAAEgB;AAAjC,KAAP;AACD,GAJiC,CAAlC;AAMAnB,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,YAAY,CAACG,OAAb,CAAqB,YAArB,EAAmCN,KAAK,CAACX,YAAzC;AACD,GAFQ,EAEN,CAACW,KAAD,CAFM,CAAT;;AAIA,QAAMO,WAAW,GAAG,MAAM;AACxBN,IAAAA,QAAQ,CAACO,SAAS,KAAK,EAAC,GAAGA,SAAJ;AAAenB,MAAAA,YAAY,EAAE,CAACmB,SAAS,CAACnB;AAAxC,KAAL,CAAV,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE,EAAE,GAAGW,KAAL;AAAYO,MAAAA,WAAW,EAAEA;AAAzB,KADT;AAAA,cAGGR,KAAK,CAACU;AAHT;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAtBQX,oB;;KAAAA,oB;AAwBT,eAAeA,oBAAf","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\nimport 'bulma/css/bulma.css';\r\nexport const ThemeContext = createContext();\r\n\r\nconst initialState = {\r\n  isLightTheme: true,\r\n  light: \" has-text-black\",\r\n  dark: \" has-background-black has-text-white\",\r\n  navLight: \"is-white\",\r\n  navDark: \"is-dark\",\r\n  cardLight: \" has-text-black\",\r\n  cardDark: \"has-background-dark has-text-white\",\r\n  pageLight: \" has-text-black\",\r\n  pageDark: \"has-text-white\",\r\n};\r\n\r\nfunction ThemeContextProvider(props) {\r\n  const [theme, setTheme] = useState(() => {\r\n    const item = localStorage.getItem('lightTheme') \r\n    const localTheme = item ? (item === 'true') : true;\r\n    return { ...initialState, isLightTheme: localTheme };\r\n  });\r\n  \r\n  useEffect(() => {\r\n    localStorage.setItem('lightTheme', theme.isLightTheme);\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prevState => ({...prevState, isLightTheme: !prevState.isLightTheme}))\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider\r\n      value={{ ...theme, toggleTheme: toggleTheme }}\r\n    >\r\n      {props.children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nexport default ThemeContextProvider;"]},"metadata":{},"sourceType":"module"}