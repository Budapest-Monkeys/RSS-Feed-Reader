{"ast":null,"code":"import React, { useEffect, useState, useContext } from 'react';\nimport { ThemeContext } from \"../contexts/ThemeContext\";\nimport './/Feed.css';\nimport Footer from './Footer';\n/*\r\n\r\n\r\n\r\nfunction Feed () {\r\n    const [backEndData, setBackEndData] = useState([{}]);\r\n    const [rssUrl, setRssUrl] = useState(\"\");\r\n    const [items, setItems] = useState([]);\r\n  \r\n    const getRss = async (e) => {\r\n        e.preventDefault();\r\n        const urlRegex = /(http|ftp|https):\\/\\/[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:\\/~+#-]*[\\w@?^=%&amp;\\/~+#-])?/;\r\n        if (!urlRegex.test(rssUrl)) {\r\n          return;\r\n        }\r\n    \r\n    const res = await fetch(`https://api.allorigins.win/get?url=${rssUrl}`);\r\n    const { contents } = await res.json();\r\n    const feed = new window.DOMParser().parseFromString(contents, \"text/xml\");\r\n    const items = feed.querySelectorAll(\"item\");\r\n    const feedItems = [...items].map((el) => ({\r\n          link: el.querySelector(\"link\").innerHTML,\r\n          title: el.querySelector(\"title\").innerHTML,\r\n          author: el.querySelector(\"author\").innerHTML\r\n    }));\r\n    setItems(feedItems);\r\n    };\r\n\r\n    //const [initialized, setInitialized] = useState(false);\r\n    //const [url, setUrl] = useState(\"\");\r\n    //const [listings, setListings] = useState([]);\r\n    //const [data, setData] = useState({});\r\n    //const  querystring = require(\"querystring\");\r\n    /*const getListings = async url => {\r\n        try {\r\n          const response = await getFeedListing(url);\r\n          setListings(response.data.items);\r\n          setData(response.data.feed);\r\n        } catch (ex) {\r\n          console.log(ex);\r\n        }\r\n      };\r\n    \r\n    const openLink = url => {\r\n        window.location.href = url;\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (!initialized) {\r\n          const url = querystring.decode(location.search)[\"?url\"];\r\n          setUrl(url);\r\n          getListings(url);\r\n          setInitialized(true);\r\n        }\r\n      });\r\n   \r\n   */\n\n/*\r\n    const context = useContext(ThemeContext);\r\n    const theme = context.isLightTheme ? context.light : context.dark;\r\n    const theme2 = context.isLightTheme ? context.cardLight : context.cardDark;\r\n    const theme3 = context.isLightTheme ? context.pageLight : context.pageDark;\r\n\r\n    const ThemeToggler = (props) => {\r\n      const context = useContext(ThemeContext);\r\n      const btnText = context.isLightTheme ? \"Light ‚òÄÔ∏è\" : \"Dark üåò\";\r\n      const toggleTheme = context.toggleTheme;\r\n      \r\n    \r\n      return (\r\n        <button className={`button is-light rounded`} onClick={toggleTheme}>\r\n          {btnText}\r\n        </button>\r\n      );\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n      // A proxy was define in package.json so we dont need to put the full route. This will be changed in production\r\n      fetch(\"/api\").then(\r\n        response => response.json()\r\n      ).then(\r\n        data => {\r\n          setBackEndData(data)\r\n        }\r\n      )\r\n    }, [])\r\n    \r\n    return (\r\n        \r\n         <div className= {`Feed ${theme}` }>\r\n         <div className={`nav ${theme2}`}>\r\n          <div className=\"logo\">RSS-Feed<span>.</span></div> \r\n          \r\n          <ul>\r\n            <li> <a href =\"/\" id = \"home-link\" >\r\n                         Home\r\n                       </a> </li>\r\n            <li> <a href =\"/feed\" id = \"feed-link\" >\r\n                         Feed\r\n                       </a> </li>\r\n           \r\n          </ul>\r\n          </div>\r\n       \r\n          <div className={`${theme3}`}>\r\n          <div className={theme3}>\r\n          <ThemeToggler className=\"themeBtn\"/>  \r\n          </div> \r\n          <form onSubmit={getRss}>\r\n        <div>\r\n          <label> rss url</label>\r\n          <br />\r\n          <input onChange={(e) => setRssUrl(e.target.value)} value={rssUrl} />\r\n        </div>\r\n        <input type=\"submit\" />\r\n      </form>\r\n      {items.map((item) => {\r\n        return (\r\n          <div>\r\n            <h1>{item.title}</h1>\r\n            <p>{item.author}</p>\r\n            <a href={item.link}>{item.link}</a>\r\n          </div>\r\n        );\r\n      })}\r\n          \r\n       \r\n       </div>\r\n        <Footer/>\r\n       </div>\r\n       \r\n\r\n    );\r\n}\r\n\r\nexport default Feed;\r\n\r\n*/","map":{"version":3,"sources":["C:/Users/Flor Hernandez/RSS-Feed-Reader/client/src/Pages/Feed.js"],"names":["React","useEffect","useState","useContext","ThemeContext","Footer"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,UAApC,QAAsD,OAAtD;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAO,aAAP;AACA,OAAOC,MAAP,MAAmB,UAAnsourcesContent":["import React, {useEffect, useState, useContext } from 'react';\r\nimport { ThemeContext } from \"../contexts/ThemeContext\";\r\nimport './/Feed.css'\r\nimport Footer from './Footer'\r\n\r\n/*\r\n\r\n\r\n\r\nfunction Feed () {\r\n    const [backEndData, setBackEndData] = useState([{}]);\r\n    const [rssUrl, setRssUrl] = useState(\"\");\r\n    const [items, setItems] = useState([]);\r\n  \r\n    const getRss = async (e) => {\r\n        e.preventDefault();\r\n        const urlRegex = /(http|ftp|https):\\/\\/[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:\\/~+#-]*[\\w@?^=%&amp;\\/~+#-])?/;\r\n        if (!urlRegex.test(rssUrl)) {\r\n          return;\r\n        }\r\n    \r\n    const res = await fetch(`https://api.allorigins.win/get?url=${rssUrl}`);\r\n    const { contents } = await res.json();\r\n    const feed = new window.DOMParser().parseFromString(contents, \"text/xml\");\r\n    const items = feed.querySelectorAll(\"item\");\r\n    const feedItems = [...items].map((el) => ({\r\n          link: el.querySelector(\"link\").innerHTML,\r\n          title: el.querySelector(\"title\").innerHTML,\r\n          author: el.querySelector(\"author\").innerHTML\r\n    }));\r\n    setItems(feedItems);\r\n    };\r\n\r\n    //const [initialized, setInitialized] = useState(false);\r\n    //const [url, setUrl] = useState(\"\");\r\n    //const [listings, setListings] = useState([]);\r\n    //const [data, setData] = useState({});\r\n    //const  querystring = require(\"querystring\");\r\n    /*const getListings = async url => {\r\n        try {\r\n          const response = await getFeedListing(url);\r\n          setListings(response.data.items);\r\n          setData(response.data.feed);\r\n        } catch (ex) {\r\n          console.log(ex);\r\n        }\r\n      };\r\n    \r\n    const openLink = url => {\r\n        window.location.href = url;\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (!initialized) {\r\n          const url = querystring.decode(location.search)[\"?url\"];\r\n          setUrl(url);\r\n          getListings(url);\r\n          setInitialized(true);\r\n        }\r\n      });\r\n   \r\n   */\r\n      \r\n/*\r\n    const context = useContext(ThemeContext);\r\n    const theme = context.isLightTheme ? context.light : context.dark;\r\n    const theme2 = context.isLightTheme ? context.cardLight : context.cardDark;\r\n    const theme3 = context.isLightTheme ? context.pageLight : context.pageDark;\r\n\r\n    const ThemeToggler = (props) => {\r\n      const context = useContext(ThemeContext);\r\n      const btnText = context.isLightTheme ? \"Light ‚òÄÔ∏è\" : \"Dark üåò\";\r\n      const toggleTheme = context.toggleTheme;\r\n      \r\n    \r\n      return (\r\n        <button className={`button is-light rounded`} onClick={toggleTheme}>\r\n          {btnText}\r\n        </button>\r\n      );\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n      // A proxy was define in package.json so we dont need to put the full route. This will be changed in production\r\n      fetch(\"/api\").then(\r\n        response => response.json()\r\n      ).then(\r\n        data => {\r\n          setBackEndData(data)\r\n        }\r\n      )\r\n    }, [])\r\n    \r\n    return (\r\n        \r\n         <div className= {`Feed ${theme}` }>\r\n         <div className={`nav ${theme2}`}>\r\n          <div className=\"logo\">RSS-Feed<span>.</span></div> \r\n          \r\n          <ul>\r\n            <li> <a href =\"/\" id = \"home-link\" >\r\n                         Home\r\n                       </a> </li>\r\n            <li> <a href =\"/feed\" id = \"feed-link\" >\r\n                         Feed\r\n                       </a> </li>\r\n           \r\n          </ul>\r\n          </div>\r\n       \r\n          <div className={`${theme3}`}>\r\n          <div className={theme3}>\r\n          <ThemeToggler className=\"themeBtn\"/>  \r\n          </div> \r\n          <form onSubmit={getRss}>\r\n        <div>\r\n          <label> rss url</label>\r\n          <br />\r\n          <input onChange={(e) => setRssUrl(e.target.value)} value={rssUrl} />\r\n        </div>\r\n        <input type=\"submit\" />\r\n      </form>\r\n      {items.map((item) => {\r\n        return (\r\n          <div>\r\n            <h1>{item.title}</h1>\r\n            <p>{item.author}</p>\r\n            <a href={item.link}>{item.link}</a>\r\n          </div>\r\n        );\r\n      })}\r\n          \r\n       \r\n       </div>\r\n        <Footer/>\r\n       </div>\r\n       \r\n\r\n    );\r\n}\r\n\r\nexport default Feed;\r\n\r\n*/"]},"metadata":{},"sourceType":"module"}